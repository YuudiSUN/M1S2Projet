# M1S2Projet: Multivariate Polynomial Interpolation & Vanishing Ideal Computation

This project computes the **vanishing ideal** of a finite set of points in ℝ² (and extends to ℝ³) using Lagrange‐style interpolation and linear algebra. It automatically generates all polynomials that vanish on a given point set and provides visualization tools.

---

## Repository Structure

```
M1S2Projet/
├── poly.py           # Compute vanishing ideal in ℝ² and print basis
├── 2D.py             # Compute & visualize zero-contours on points in ℝ²
├── 3poly.py          # Compute vanishing ideal in ℝ³ (extended version)
├── pcca-6-slide.pdf        # Slide for presentation
└── README.md         # Project overview (this file)
```

---

## 🔧 Requirements & Installation

- **Python** ≥ 3.7  
- [SymPy](https://www.sympy.org)  
- [NumPy](https://numpy.org)  
- [Matplotlib](https://matplotlib.org)  

```bash
git clone https://github.com/YuudiSUN/M1S2Projet.git
cd M1S2Projet
pip install sympy numpy matplotlib
```

---

## 🚀 Quick Start

### 1. Compute Vanishing Ideal in 2D (`poly.py`)

1. **Configure**  
   At the top of `poly.py`, set:  
   - `points`: list of `(x, y)` tuples  
   - `max_degree`: maximum total degree of polynomials  

2. **Run**  
   ```bash
   python poly.py
   # or python3 poly.py
   ```

3. **Sample Output**  
   ```
   Points E: [(0, 0), (1, 0), (2, 0), (0, 1)]
   Vanishing polynomials by degree:
     Degree ≤ 1 → nullspace dim = 1:
       x^2 - 2*x
     Degree ≤ 2 → nullspace dim = 2:
       x^2 - 2*x
       y^2 - y
   Reduced basis of the vanishing ideal:
     x^2 - 2*x
     y^2 - y
   ```

---

### 2. Visualize Zero-Contours in 2D (`2D.py`)

1. **Configure**  
   Edit the `points` and `max_degree` variables at the top of `2D.py`.  

2. **Run**  
   ```bash
   python 2D.py
   ```

3. **Result**  
   A window will pop up showing:  
   - A scatter plot of your points  
   - Zero-contours (level sets) of each basis polynomial  

---

### 3. Compute Vanishing Ideal in 3D (`3poly.py`)

1. **Configure**  
   - Change `points` to a list of `(x, y, z)` tuples  
   - Set `max_degree`  

2. **Run**  
   ```bash
   python 3poly.py
   ```

3. **Result**  
   Output is analogous to `poly.py` but for 3D point sets.

---

## ✨ Algorithm Outline

1. **Symbol Definition**  
   Define symbolic variables (`x, y` or `x, y, z`) via SymPy.  

2. **Monomial Enumeration**  
   Generate all monomials of total degree ≤ `max_degree`.  

3. **Leading-Term Filtering**  
   Remove monomials divisible by previously recorded leading terms at each iteration.  

4. **Evaluation Matrix**  
   Build a matrix of monomial values evaluated at each point.  

5. **Nullspace Computation**  
   Compute the nullspace → basis of all vanishing polynomials.  

6. **Record Leading Terms**  
   Extract each basis polynomial’s leading term for the next filter step.  
